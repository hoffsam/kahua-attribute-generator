{"version":3,"file":"extension.js","sourceRoot":"","sources":["../src/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from 'vscode';\n\n/**\n * This function is called when your extension is activated. Your extension is activated\n * the very first time the command is executed.\n */\nexport function activate(context: vscode.ExtensionContext) {\n  // Register commands for both extension and supplement modes. Each will call\n  // the shared handler with the appropriate mode string.\n  // This allows the extension to be used from the command palette or context menu.\n  // The commands are registered with the context so they can be disposed of when the extension is deactivated.\n  // The commands are also added to the context menu for easy access.\n  // The context variable 'kahua.showInContextMenu' is set to true to enable\n  // the context menu items when the editor has focus and a selection is made.\n  vscode.commands.executeCommand('setContext', 'kahua.showInContextMenu', true);\n  context.subscriptions.push(\n    vscode.commands.registerCommand('kahua.createExtensionAttributes', () => handleSelection('extension')),\n    vscode.commands.registerCommand('kahua.createSupplementAttributes', () => handleSelection('supplement')),\n  );\n}\n\n/**\n * This function is called when your extension is deactivated. Nothing to clean up\n * at the moment, but the function is required by VS Code's API.\n */\nexport function deactivate() {\n  /* noâ€‘op */\n}\n\n/**\n * Handles the logic of reading the current selection and generating XML snippets\n * based on the provided mode. Validates configuration and selection, then generates\n * XML using configurable tokens and fragments.\n *\n * @param mode Determines which prefix configuration key to use: \"extension\" or \"supplement\".\n */\nasync function handleSelection(mode: 'extension' | 'supplement'): Promise<void> {\n  vscode.window.showInformationMessage(`Debug: handleSelection called with mode: ${mode}`);\n  \n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    vscode.window.showErrorMessage('No active editor found');\n    return;\n  }\n\n  try {\n    // Validate configuration\n    const config = vscode.workspace.getConfiguration();\n    \n    // Get and validate token names\n    const tokenNamesConfig = config.get<string>('kahua.tokenNames');\n    if (!tokenNamesConfig || typeof tokenNamesConfig !== 'string' || tokenNamesConfig.trim() === '') {\n      throw new Error('kahua.tokenNames is not defined or is empty. Please configure token names in your settings.');\n    }\n    \n    const tokenNames = tokenNamesConfig.split(',').map(t => t.trim()).filter(Boolean);\n    if (tokenNames.length === 0) {\n      throw new Error('kahua.tokenNames contains no valid token names. Please provide comma-separated token names.');\n    }\n    \n    // Get and validate fragments\n    const fragmentTemplates = config.get<Record<string, string>>('kahua.fragments');\n    if (!fragmentTemplates || typeof fragmentTemplates !== 'object' || Object.keys(fragmentTemplates).length === 0) {\n      throw new Error('kahua.fragments is not defined or is empty. Please configure fragment templates in your settings.');\n    }\n    \n    // Validate that fragments contain valid templates\n    for (const [key, template] of Object.entries(fragmentTemplates)) {\n      if (!template || typeof template !== 'string') {\n        throw new Error(`Fragment '${key}' has an invalid template. All fragments must be non-empty strings.`);\n      }\n    }\n\n    // Validate selection\n    const selection = editor.document.getText(editor.selection);\n    if (!selection || selection.trim() === '') {\n      throw new Error('No text selected. Please select one or more lines of text to generate attributes.');\n    }\n    \n    const lines = selection.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n    if (lines.length === 0) {\n      throw new Error('Selected text contains no valid lines. Please select text with content.');\n    }\n\n    // Process each line\n    const expanded: Record<string, string[]> = {};\n    const allTokenData: Array<Record<string, string>> = [];\n    \n    for (const line of lines) {\n      const rawParts = line.split(','); // Keep original whitespace, allow empty parts\n      const trimmedParts = rawParts.map(p => p.trim()); // Trimmed for processing\n      \n      // Build token values for this line\n      const tokenValues: Record<string, string> = {};\n      const rawTokenValues: Record<string, string> = {};\n      \n      for (let i = 0; i < tokenNames.length; i++) {\n        const tokenName = tokenNames[i];\n        // Default to empty string if token not provided\n        tokenValues[tokenName] = trimmedParts[i] || '';\n        rawTokenValues[tokenName] = rawParts[i] || '';\n      }\n      \n      // Store token data for the table\n      allTokenData.push({ ...tokenValues });\n\n      // Apply token replacement for all configured tokens\n      for (const [key, template] of Object.entries(fragmentTemplates)) {\n        let rendered = template;\n        \n        // Handle whitespace-controlled token replacement\n        for (const [tokenName, tokenValue] of Object.entries(tokenValues)) {\n          const rawValue = rawTokenValues[tokenName];\n          \n          // Replace {token:friendly} - preserves original whitespace/formatting\n          rendered = rendered.replaceAll(`{${tokenName}:friendly}`, rawValue);\n          \n          // Replace {token:internal} - uses processed/trimmed value (explicit)\n          rendered = rendered.replaceAll(`{${tokenName}:internal}`, tokenValue);\n          \n          // Replace {token} - default behavior (uses processed/trimmed value)\n          rendered = rendered.replaceAll(`{${tokenName}}`, tokenValue);\n        }\n        \n        (expanded[key] ??= []).push(rendered);\n      }\n    }\n\n    // Create token table\n    const tokenTable = createTokenTable(tokenNames, allTokenData);\n\n    // Join each category of snippets together\n    const fragmentsXml = Object.entries(expanded)\n      .map(([key, lines]: [string, string[]]) =>\n        `<!-- ${key} -->\\n${lines.join('\\n')}`\n      ).join('\\n\\n');\n    \n    const generatedXml = `${tokenTable}\\n\\n${fragmentsXml}`;\n      \n    // Get the output target setting\n    const outputTarget = config.get<string>('kahua.outputTarget') || 'newEditor';\n\n    if (outputTarget === 'newEditor') {\n      // Open in new editor window\n      const newDocument = await vscode.workspace.openTextDocument({\n        content: generatedXml,\n        language: 'xml'\n      });\n\n      await vscode.window.showTextDocument(newDocument, {\n        viewColumn: vscode.ViewColumn.Beside,\n        preview: false\n      });\n\n      vscode.window.showInformationMessage(`Kahua: Generated ${mode} attributes in new editor window`);\n    } else {\n      // Copy to clipboard\n      await vscode.env.clipboard.writeText(generatedXml);\n      vscode.window.showInformationMessage(`Kahua: Generated ${mode} attributes copied to clipboard`);\n    }\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : 'Unknown error occurred';\n    vscode.window.showErrorMessage(`Kahua Attribute Generator: ${message}`);\n  }\n}\n\n/**\n * Creates a table showing token names and their values from the processed lines\n */\nfunction createTokenTable(tokenNames: string[], tokenData: Array<Record<string, string>>): string {\n  if (tokenData.length === 0) {\n    return '<!-- No token data -->';\n  }\n  \n  const header = `| Token | ${tokenData.map((_, i) => `Line ${i + 1}`).join(' | ')} |`;\n  const separator = `|${'-'.repeat(7)}|${tokenData.map(() => '-'.repeat(8)).join('|')}|`;\n  \n  const rows = tokenNames.map(tokenName => {\n    const values = tokenData.map(data => data[tokenName] || '');\n    return `| ${tokenName} | ${values.join(' | ')} |`;\n  });\n  \n  return `<!-- Token Values Table -->\\n${header}\\n${separator}\\n${rows.join('\\n')}`;\n}"]}