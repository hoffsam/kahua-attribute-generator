{"version":3,"file":"extension.js","sourceRoot":"","sources":["../src/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from 'vscode';\n\n/**\n * This function is called when your extension is activated. Your extension is activated\n * the very first time the command is executed.\n */\nexport function activate(context: vscode.ExtensionContext) {\n  // Register commands for both extension and supplement modes. Each will call\n  // the shared handler with the appropriate mode string.\n  context.subscriptions.push(\n    vscode.commands.registerCommand('kahua.createExtensionAttributes', () => handleSelection('extension')),\n    vscode.commands.registerCommand('kahua.createSupplementAttributes', () => handleSelection('supplement'))\n  );\n}\n\n/**\n * This function is called when your extension is deactivated. Nothing to clean up\n * at the moment, but the function is required by VS Code's API.\n */\nexport function deactivate() {\n  /* noâ€‘op */\n}\n\n/**\n * Handles the logic of reading the current selection and generating XML snippets\n * based on the provided mode. When invoked, it reads each selected line,\n * sanitizes it to form a valid attribute name, and then creates attribute,\n * label, datatag, field and field definition fragments according to user\n * configurable templates. The result is placed on the clipboard and a\n * notification is shown.\n *\n * @param mode Determines which prefix configuration key to use: \"extension\" or \"supplement\".\n */\nasync function handleSelection(mode: 'extension' | 'supplement'): Promise<void> {\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    return;\n  }\n\n  // Fetch the base prefix for the current mode from configuration. Defaults defined in package.json.\n  const modePrefix: string = vscode.workspace.getConfiguration().get<string>(`kahua.defaultPrefix.${mode}`) || '';\n\n  // Grab the currently selected text and split it into trimmed, nonempty lines.\n  const selection = editor.document.getText(editor.selection);\n  const lines = selection.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n\n  // Read the entire document to allow fallback prefix extraction from the first EntityDef when needed.\n  const documentText = editor.document.getText();\n\n  // Attempt to find the first <EntityDef Name=\"...\"> in the document. Used when only an attribute name is provided.\n  const firstEntityName = (() => {\n    const match = documentText.match(/<\\s*EntityDef[^>]*\\bName\\s*=\\s*\"([^\"<>]+)\"/);\n    return match ? match[1] : '';\n  })();\n\n  // Helper to fetch a template from configuration with fallback to a default.\n  const format = (key: string, fallback: string): string => {\n    return vscode.workspace.getConfiguration().get<string>(`kahua.tokens.${key}`) || fallback;\n  };\n\n  // For each line produce a set of XML snippet parts.\n  const fragmentTemplates = vscode.workspace.getConfiguration().get<Record<string, string>>('kahua.fragments') || {};\n\n  const expanded: Record<string, string[]> = {};\n  for (const line of lines) {\n    const parts = line.split(',').map(p => p.trim()).filter(Boolean);\n    if (!parts.length) continue;\n\n    const rawName = parts[0];\n    const name = rawName.replace(/[^A-Za-z0-9]/g, '');\n    const label = rawName;\n    const prefix = parts[1] || firstEntityName || modePrefix;\n    const type = parts[2] || 'Text';\n\n    for (const [key, template] of Object.entries(fragmentTemplates)) {\n      const rendered = template\n        .replaceAll('{prefix}', prefix)\n        .replaceAll('{name}', name)\n        .replaceAll('{label}', label)\n        .replaceAll('{type}', type);\n      (expanded[key] ??= []).push(rendered);\n    }\n  }\n\n\n  // Join each category of snippets together so they're grouped in the output.\n  const result = Object.entries(expanded)\n    .map(([key, lines]: [string, string[]]) =>\n      `<!-- ${key} -->\\n${lines.join('\\n')}`\n    ).join('\\n\\n');\n    \n  // Write the result to the clipboard. VS Code automatically handles asynchronous copy.\n  await vscode.env.clipboard.writeText(result);\n  vscode.window.showInformationMessage('Kahua XML generated to clipboard.');\n}"]}